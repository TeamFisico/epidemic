# Use, modification, and distribution are
# subject to the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Copyright 2019 Ren√© Ferdinand Rivera Morell.
# Copyright 2020 Jayesh Vinay Badwaik

trigger:
  branches:
    include:
    - develop
    - master
    - feature/*
    - pr/*
    - issue/*
  paths:
    exclude:
    - .circleci/*
    - .drone.star
    - .github/workflows/*
    - .semaphore/*
    - .travis.yml
    - appveyor.yml
pr:
  branches:
    include:
    - develop

stages:

- stage: Base
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 10 Warn-All: {
          CXX: g++-10, PACKAGES: g++-10, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a", B2_ARGS: "warnings=extra warnings-as-errors=on cxxflags=-Woverloaded-virtual" }
        Clang 11 Warn-All: {
          CXX: clang++-11, PACKAGES: clang-11, LLVM_OS: bionic, LLVM_VER: 11, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a", B2_ARGS: "warnings=extra warnings-as-errors=on" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-linux-test.yml

  - job: 'Xcode'
    strategy:
      matrix:
        Xcode 12.4: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.4",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-xcode-test.yml

  - job: 'Visual_Studio'
    strategy:
      matrix:
        VS 2019 Warn-All: {
          VSWHERE_VERSION: '[16.0,17.0)', CXX: cl.exe, B2_ARGS: "warnings=extra warnings-as-errors=on",
          PLATFORM: x64, VM_IMAGE: 'windows-2019', TOOLSET: msvc, TOOLSET_VERSION: '14.2' }
        VS 2019: {
          VSWHERE_VERSION: '[16.0,17.0)', CXX: cl.exe,
          PLATFORM: x64, VM_IMAGE: 'windows-2019', TOOLSET: msvc, TOOLSET_VERSION: '14.2' }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-msvc-test.yml

- stage: Test
  dependsOn: [Base]
  jobs:

  - job: 'Linux'
    strategy:
      matrix:
        GCC 10: {
          CXX: g++-10, PACKAGES: g++-10, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 9: {
          CXX: g++-9, PACKAGES: g++-9, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 8: {
          CXX: g++-8, PACKAGES: g++-8, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17,2a" }
        GCC 7: {
          CXX: g++-7, PACKAGES: g++-7, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 6: {
          CXX: g++-6, PACKAGES: g++-6, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14,17" }
        GCC 5: {
          CXX: g++-5, PACKAGES: g++-5, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: gcc, CXXSTD: "11,14" }
        GCC 4.9: {
          CXX: g++-4.9, PACKAGES: g++-4.9, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: gcc, CXXSTD: "11" }
        Clang 11: {
          CXX: clang++-11, PACKAGES: clang-11, LLVM_OS: bionic, LLVM_VER: 11, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 10: {
          CXX: clang++-10, PACKAGES: clang-10, LLVM_OS: bionic, LLVM_VER: 10, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 9: {
          CXX: clang++-9, PACKAGES: clang-9, LLVM_OS: bionic, LLVM_VER: 9, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 8: {
          CXX: clang++-8, PACKAGES: clang-8, LLVM_OS: bionic, LLVM_VER: 8, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Clang 7: {
          CXX: clang++-7, PACKAGES: clang-7, LLVM_OS: bionic, LLVM_VER: 7, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 6.0: {
          CXX: clang++-6.0, PACKAGES: clang-6.0, LLVM_OS: bionic, LLVM_VER: 6.0, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 5.0: {
          CXX: clang++-5.0, PACKAGES: clang-5.0, LLVM_OS: bionic, LLVM_VER: 5.0, VM_IMAGE: 'ubuntu-18.04',
          TOOLSET: clang, CXXSTD: "11,14,17" }
        Clang 4.0: {
          CXX: clang++-4.0, PACKAGES: clang-4.0, LLVM_OS: xenial, LLVM_VER: 4.0, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: clang, CXXSTD: "11,14" }
        Clang 3.9: {
          CXX: clang++-3.9, PACKAGES: clang-3.9, LLVM_OS: xenial, LLVM_VER: 3.9, VM_IMAGE: 'ubuntu-16.04',
          TOOLSET: clang, CXXSTD: "11" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-linux-test.yml

  - job: 'Xcode'
    strategy:
      matrix:
        Xcode 12.3: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.3",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 12.2: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.2",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 12.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 12.0.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "12.0.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.7: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.7",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.6: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.6",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.5: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.5",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.4.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.4.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.3.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.3.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
        Xcode 11.2.1: {
          CXX: clang++, VM_IMAGE: 'macOS-10.15', XCODE_VERSION: "11.2.1",
          TOOLSET: clang, CXXSTD: "11,14,17,2a" }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-xcode-test.yml

  - job: 'Visual_Studio'
    strategy:
      matrix:
        VS 2017: {
          VSWHERE_VERSION: '[15.0,16.0)', CXX: cl.exe, PLATFORM: x64, VM_IMAGE: 'vs2017-win2016',
          TOOLSET: msvc, TOOLSET_VERSION: '14.1' }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-msvc-test.yml

  - job: 'MinGW'
    strategy:
      matrix:
        MinGW 8.1.0: { VM_IMAGE: 'vs2017-win2016',
          TOOLSET: gcc }
    pool:
      vmImage: $(VM_IMAGE)
    steps:
    - template: .ci/azp-mingw-test.yml
